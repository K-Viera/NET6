#!markdown

### Numbering Systems

#!csharp

int digitSeparator =1_000_000;
Console.WriteLine(digitSeparator);

#!csharp

int binaryNumber=0b10010;
Console.WriteLine(binaryNumber);

#!csharp

int hexadecimalNumber=0xAF2;
Console.WriteLine(hexadecimalNumber);
hexadecimalNumber

#!csharp

display(hexadecimalNumber);
display(binaryNumber);

#!markdown

### Double and decimal

#!markdown

floating-point numbers are numbers that can be represented by binary systems, all naturals numbers can be represented by the binary sistems, but decimals like 0.1 can't.

<sub>https://www.exploringbinary.com/why-0-point-1-does-not-exist-in-floating-point/</sup>

#!csharp

Console.WriteLine("Using doubles:");
double a=0.1;
double b=0.2;

if (a + b == 0.3)
{
 Console.WriteLine($"{a} + {b} equals {0.3}");
}
else
{
 Console.WriteLine($"{a} + {b} does NOT equal {0.3}");
}
Console.WriteLine($"{a+b}");

#!markdown

The solution of this problem presented by decimals in computers numbers was solved by the decimal dataType, this representacion set a decimal number like 0,1 as a 1 with a mark to shift the decimal point one place to the left

#!csharp

Console.WriteLine("Using doubles:");
decimal a=0.1M;
decimal b=0.2M;

if (a + b == 0.3M)
{
 Console.WriteLine($"{a} + {b} equals {0.3M}");
}
else
{
 Console.WriteLine($"{a} + {b} does NOT equal {0.3M}");
}
Console.WriteLine($"{a+b}");

#!markdown

### Big integers

#!csharp

using static System.Console;
using System.Numerics;

#!csharp

WriteLine("Working with large integers:");
WriteLine("-----------------------------------");
ulong big = ulong.MaxValue;
WriteLine($"{big,40:N0}");
BigInteger bigger =
  BigInteger.Parse("123456789012345678901234567890");
WriteLine($"{bigger,40:N0}");

#!markdown

### Complex numbers

#!csharp

WriteLine("Working with complex numbers:");
Complex c1 = new(real: 4, imaginary: 2);
Complex c2 = new(real: 3, imaginary: 7);
Complex c3 = c1 + c2;
// output using default ToString implementation
WriteLine($"{c1} added to {c2} is {c3}");
// output using custom format
WriteLine("{0} + {1}i added to {2} + {3}i is {4} + {5}i",
  c1.Real, c1.Imaginary, 
  c2.Real, c2.Imaginary,
  c3.Real, c3.Imaginary);
