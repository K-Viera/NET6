#!csharp

Console.WriteLine(
    "(C) Currency: . . . . . . . . {0:C}\n" +
    "(D) Decimal:. . . . . . . . . {0:D}\n" +
    "(E) Scientific: . . . . . . . {1:E}\n" +
    "(F) Fixed point:. . . . . . . {1:F}\n" +
    "(G) General:. . . . . . . . . {0:G}\n" +
    "    (default):. . . . . . . . {0} (default = 'G')\n" +
    "(N) Number: . . . . . . . . . {0:N}\n" +
    "(P) Percent:. . . . . . . . . {1:P}\n" +
    "(R) Round-trip: . . . . . . . {1:R}\n" +
    "(X) Hexadecimal:. . . . . . . {0:X}\n",
    -123, -123.45f);

#!csharp

static DateTime thisDate = DateTime.Now;

#!csharp

Console.WriteLine("Standard DateTime Format Specifiers");
Console.WriteLine(
    "(d) Short date: . . . . . . . {0:d}\n" +
    "(D) Long date:. . . . . . . . {0:D}\n" +
    "(t) Short time: . . . . . . . {0:t}\n" +
    "(T) Long time:. . . . . . . . {0:T}\n" +
    "(f) Full date/short time: . . {0:f}\n" +
    "(F) Full date/long time:. . . {0:F}\n" +
    "(g) General date/short time:. {0:g}\n" +
    "(G) General date/long time: . {0:G}\n" +
    "    (default):. . . . . . . . {0} (default = 'G')\n" +
    "(M) Month:. . . . . . . . . . {0:M}\n" +
    "(R) RFC1123:. . . . . . . . . {0:R}\n" +
    "(s) Sortable: . . . . . . . . {0:s}\n" +
    "(u) Universal sortable: . . . {0:u} (invariant)\n" +
    "(U) Universal full date/time: {0:U}\n" +
    "(Y) Year: . . . . . . . . . . {0:Y}\n",
    thisDate);

#!markdown

### Literal String

#!csharp

Console.WriteLine("hello\tkev");
Console.WriteLine("hello\\kenv");

#!markdown

### Verbatim string

#!csharp

Console.WriteLine(@"hello\t");
Console.WriteLine(@"hello\\");
Console.WriteLine(@"hello
kevin");

#!markdown

### String interpolation

#!csharp

string name ="Mark";
DateTime date= DateTime.Now;
Console.WriteLine($"Hello,{name}! Today is {date.DayOfWeek}, it's {date:HH:mm} now.");
